{
  "info": {
    "name": "Skaitomanas API",
    "description": "Saitynu projekto Skaitomanas postman kolekcija.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "bookId",
      "value": "",
      "type": "string"
    },
    {
      "key": "chapterId",
      "value": "",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "collectionId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi success true', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.token).to.exist;",
                  "    pm.collectionVariables.set('token', jsonData.data.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"username\": \"testuser\",\n  \"role\": \"author\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Register - Invalid Email (422)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 422', function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi success false', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"netinkamas-email\",\n  \"password\": \"password123\",\n  \"username\": \"testuser\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Register - Missing Fields (422)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 422', function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi klaidos pranešimą', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi success true', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.token).to.exist;",
                  "    pm.collectionVariables.set('token', jsonData.data.token);",
                  "    pm.collectionVariables.set('userId', jsonData.data.user.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"jonas@example.lt\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login - Wrong Credentials (401)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi klaidos pranešimą', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"jonas@example.lt\",\n  \"password\": \"neteisingas\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi vartotojo duomenis', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            }
          }
        },
        {
          "name": "Get Current User - No Token (401)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            }
          }
        }
      ]
    },
    {
      "name": "Books",
      "item": [
        {
          "name": "Get Books",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi knygų masyvą', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.books).to.be.an('array');",
                  "    if (jsonData.data.books.length > 0) {",
                  "        pm.collectionVariables.set('bookId', jsonData.data.books[0].id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            }
          }
        },
        {
          "name": "Create Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi knygos duomenis', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.book).to.exist;",
                  "    pm.collectionVariables.set('bookId', jsonData.data.book.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Nauja Knyga\",\n  \"description\": \"Aprašymas\",\n  \"language\": \"lt\",\n  \"tags\": [\"naujiena\"],\n  \"status\": \"published\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            }
          }
        },
        {
          "name": "Create Book - Invalid Payload (422)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 422', function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi klaidos pranešimą', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Aprašymas be pavadinimo\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            }
          }
        },
        {
          "name": "Create Book - No Auth (401)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Nauja Knyga\",\n  \"description\": \"Aprašymas\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            }
          }
        },
        {
          "name": "Get Book By ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi knygą ir skyrius', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.book).to.exist;",
                  "    pm.expect(jsonData.data.chapters).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}"]
            }
          }
        },
        {
          "name": "Get Book By ID - Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi klaidos pranešimą', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["books", "00000000-0000-0000-0000-000000000000"]
            }
          }
        },
        {
          "name": "Update Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Atnaujinta Knyga\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}"]
            }
          }
        },
        {
          "name": "Update Book - Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Atnaujinta Knyga\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["books", "00000000-0000-0000-0000-000000000000"]
            }
          }
        },
        {
          "name": "Delete Book (204)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Atsakymas neturi body', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}"]
            }
          }
        },
        {
          "name": "Delete Book - Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/books/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["books", "00000000-0000-0000-0000-000000000000"]
            }
          }
        },
        {
          "name": "Get Book Recommendations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi knygų masyvą', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.books).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/recommendations",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "recommendations"]
            }
          }
        },
        {
          "name": "Get Book Recommendations - Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books/00000000-0000-0000-0000-000000000000/recommendations",
              "host": ["{{baseUrl}}"],
              "path": ["books", "00000000-0000-0000-0000-000000000000", "recommendations"]
            }
          }
        }
      ]
    },
    {
      "name": "Chapters",
      "item": [
        {
          "name": "Get Chapters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi skyrių masyvą', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.chapters).to.be.an('array');",
                  "    if (jsonData.data.chapters.length > 0) {",
                  "        pm.collectionVariables.set('chapterId', jsonData.data.chapters[0].id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/chapters",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "chapters"]
            }
          }
        },
        {
          "name": "Get Chapters - Book Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books/00000000-0000-0000-0000-000000000000/chapters",
              "host": ["{{baseUrl}}"],
              "path": ["books", "00000000-0000-0000-0000-000000000000", "chapters"]
            }
          }
        },
        {
          "name": "Create Chapter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi skyriaus duomenis', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.chapter).to.exist;",
                  "    pm.collectionVariables.set('chapterId', jsonData.data.chapter.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Naujas Skyrius\",\n  \"content\": \"Skyriaus turinys...\",\n  \"chapter_number\": 10,\n  \"is_published\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/chapters",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "chapters"]
            }
          }
        },
        {
          "name": "Create Chapter - Invalid Payload (422)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 422', function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi klaidos pranešimą', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Skyrius be turinio\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/chapters",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "chapters"]
            }
          }
        },
        {
          "name": "Get Chapter By ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/chapters/{{chapterId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "chapters", "{{chapterId}}"]
            }
          }
        },
        {
          "name": "Get Chapter By ID - Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/chapters/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "chapters", "00000000-0000-0000-0000-000000000000"]
            }
          }
        },
        {
          "name": "Update Chapter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Atnaujintas skyrius\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/chapters/{{chapterId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "chapters", "{{chapterId}}"]
            }
          }
        },
        {
          "name": "Delete Chapter (204)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Atsakymas neturi body', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/chapters/{{chapterId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "chapters", "{{chapterId}}"]
            }
          }
        },
        {
          "name": "Delete Chapter - Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/chapters/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "chapters", "00000000-0000-0000-0000-000000000000"]
            }
          }
        }
      ]
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "Get Comments",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi komentarų masyvą', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.comments).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/chapters/{{chapterId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["chapters", "{{chapterId}}", "comments"]
            }
          }
        },
        {
          "name": "Get Comments - Chapter Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/chapters/00000000-0000-0000-0000-000000000000/comments",
              "host": ["{{baseUrl}}"],
              "path": ["chapters", "00000000-0000-0000-0000-000000000000", "comments"]
            }
          }
        },
        {
          "name": "Create Comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi komentaro duomenis', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.comment).to.exist;",
                  "    pm.collectionVariables.set('commentId', jsonData.data.comment.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Puikus skyrius!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chapters/{{chapterId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["chapters", "{{chapterId}}", "comments"]
            }
          }
        },
        {
          "name": "Create Comment - Invalid Payload (422)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 422', function () {",
                  "    pm.response.to.have.status(422);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/chapters/{{chapterId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["chapters", "{{chapterId}}", "comments"]
            }
          }
        },
        {
          "name": "Update Comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Atnaujintas komentaras\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["comments", "{{commentId}}"]
            }
          }
        },
        {
          "name": "Delete Comment (204)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Atsakymas neturi body', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["comments", "{{commentId}}"]
            }
          }
        },
        {
          "name": "Delete Comment - Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/comments/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["comments", "00000000-0000-0000-0000-000000000000"]
            }
          }
        }
      ]
    },
    {
      "name": "Collections",
      "item": [
        {
          "name": "Get User Collections",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/collections",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "collections"]
            }
          }
        },
        {
          "name": "Add to Collection",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"book_id\": \"{{bookId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/collections",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "collections"]
            }
          }
        },
        {
          "name": "Add to Collection - Book Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"book_id\": \"00000000-0000-0000-0000-000000000000\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/collections",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "collections"]
            }
          }
        },
        {
          "name": "Add to Collection - Invalid Payload (422)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 422 arba 400', function () {",
                  "    pm.expect([400, 422]).to.include(pm.response.code);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/collections",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "collections"]
            }
          }
        },
        {
          "name": "Remove from Collection (204)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Atsakymas neturi body', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/collections/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "collections", "{{bookId}}"]
            }
          }
        },
        {
          "name": "Remove from Collection - Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/collections/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "collections", "00000000-0000-0000-0000-000000000000"]
            }
          }
        }
      ]
    },
    {
      "name": "Stats",
      "item": [
        {
          "name": "Get Author Stats",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Atsakymas turi statistikos duomenis', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.stats).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/authors/{{userId}}/stats",
              "host": ["{{baseUrl}}"],
              "path": ["authors", "{{userId}}", "stats"]
            }
          }
        },
        {
          "name": "Get Author Stats - User Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/authors/00000000-0000-0000-0000-000000000000/stats",
              "host": ["{{baseUrl}}"],
              "path": ["authors", "00000000-0000-0000-0000-000000000000", "stats"]
            }
          }
        },
        {
          "name": "Get User Reading History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/history",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "history"]
            }
          }
        },
        {
          "name": "Get User Reading History - User Not Found (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Būsenos kodas yra 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/users/00000000-0000-0000-0000-000000000000/history",
              "host": ["{{baseUrl}}"],
              "path": ["users", "00000000-0000-0000-0000-000000000000", "history"]
            }
          }
        }
      ]
    }
  ]
}
